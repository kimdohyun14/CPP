#include <iostream>
using namespace std;

// 가상 클래스의 소멸자

	/* C++에서는 상속 관계가 있으면서 그와 동시에 메모리 해제를 해야 하는 경우에는 반드시 부모 클래스의 소멸자를
	   가상 함수로 선언해야 한다. 부모 포인터로 객체를 삭제하면 부모 클래스의 소멸자가 호출되기 때문.
	   
	   만약 다형성을 이용할 때 소멸자를 가상 함수로 선언하지 않으면 자식 클래스의 소멸자는 호출되지 않고,
	   부모 클래스의 소멸자만 호출되기 때문에 자식 클래스의 객체는 여전히 정상적으로 해제되지 않는다.*/

// 순수 가상 함수

	/* C++의 가상 함수는 기본적으로 반드시 재정의할 필요는 없다.
	   하지만 순수 가상 함수(Pure Virtual Function)는 자식 클래스에서 반드시 재정의를 해주어야 하는 함수이다.
	   
	   그러므로 일반적으로 순수 가상 함수는 부모 클래스에서 함수 동작의 본체를 정의하지 않는다.
	   자식 클래스에서 반드시 이를 정의해야 사용할 수 있다.
	   
	   순수 가상 함수는 '=0' 키워드를 붙여서 선언할 수 있다. */

// 추상 클래스
	
	/* 추상 클래스(Abstract Class)란 하나 이상의 순수 가상 함수를 포함하는 클래스를 의미한다.
	   추상 클래스를 활용하면 다형성을 효과적으로 프로그램 상에서 구현할 수 있다.
	   
	   따라서 자식 클래스는 추상 클래스를 상속 받은 이후에 반드시 순수 가상 함수를 모두 오버라이딩
	   해야 비로소 해당 객체를 사용할 수 있다. */

class A
{
public:
	// 순수 가상 함수
	virtual void show() = 0 { cout << "A클래스" << endl; }
};

class B : public A
{
public:
	virtual void show() { cout << "B 클래스" << endl; }
	// show() 함수를 재정의하지 않으면 B 클래스의 객체를 사용할 수 없다.
};

int main()
{
	A* p;
	B b;
	p = &b; p->show();
	return 0;
}