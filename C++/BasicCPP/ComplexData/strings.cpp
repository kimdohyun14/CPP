#include <iostream>
#include <cstring> // strlen()

/*
문자열(string) : 메모리에 바이트 단위로 연속적으로 저장되어 있는 문자들을 말한다.

# C 스타일의 문자열 처리방법 1
- 모든 문자열의 마지막 문자가 반드시 널 문자여야 한다.
- 널 문자는 '\0', 아스키코드로 0이다.
- 널 문자는 문자열의 끝을 표시한다.
char cat[8] = { 'f', 'a', 't', 'e', 's', 's', 'a', '\0' };

# C 스타일의 문자열 처리방법 2
- char형의 배열을 문자열로 초기화하는 방법
- 문자열 상수(string constant 또는 string literal)
char bird[11] = "Mr. Cheeps"; \0을 저장한다.
char fish[] = "Bubbles"; 컴파일러가 알아서 처리한다.
- 중요한 것은 큰따옴표로 묶인 문자열은 끝내기 널 문자를 암시적으로 가지고 있다.
- 그러므로 문자열의 끝에 널 문자를 명시적으로 넣을 필요가 없다!
- 키보드 입력에서 문자열을 읽어 char형의 배열에 저장하는 C++의 다양한 입력 기능들은 널 문자를 자동으로 추가한다!

=> 문자열을 저장할 char형의 배열은, 그 크기가 널 문자까지 포함하여 그 문자열에 들어 있는 모든 문자들을
   다 넣을 수 있을 만큼 충분히 커야 한다.

char boss[8] = "Bozo";
=> 'B', 'o', 'z', 'o', '\0', '\0', '\0', '\0'
널 문자가 끝에 \0으로 채운다. (자동으로 추가된다!!)

# 헷갈리기 쉬운
- 문자열 상수와 문자 상수는 서로 바꾸어 쓸 수 없다.
왜?
"S"는 두 개의 문자 S와 \0로 구성된 문자열을 나타내기 때문이다. (아까 말했듯이 문자열 끝에 \0 자동으로 추가되기 때문!)
또, "S"는 내부적으로 그 문자열이 저장되어 있는 메모리 주소를 나타낸다.
그래서 "S" != 'S'

- 결합된 문자열에는 어떠한 빈칸도 추가되지 않는다!
- 결합될 때에는 다 결합된 후에 마지막에 널 문자가 자동으로 추가된다.
"violinist.\n" "to be good!!"
=> "violinist."
=> "to be good!!"
*/
int main()
{
	using namespace std;

	// 배열의 크기를 기호 상수로 나타내면 나중에 배열의 크기를 변경하기 쉽다.
	// 이것만 변경하면 다 변경되기 때문
	const int Size = 15;

	char name1[Size];              // 비어있는 배열
	char name2[Size] = "C++owboy"; // 문자열 상수로 초기화된 배열

	// strlen()은 문자열의 길이를 리턴하는 함수
	cout << "안녕하세요! 저는 " << name2 << "입니다! 실례지만 성함이?\n";
	cin >> name1;
	cout << "아, " << name1 << "씨! 당신의 이름은 " << strlen(name1) << "자입니다만 \n";
	cout << sizeof(name1) << "바이트 크기의 배열에 저장되었습니다.\n";
	cout << "이름이 " << name1[0] << "자로 시작하는군요.\n";
	name2[3] = '\0'; // 널 문자
	cout << "제 이름의 처음 세 문자는 다음과 같습니다: ";
	cout << name2 << endl;
	return 0;
}