#include <iostream>
using namespace std;

// 부동 소수점의 장점
// 1. 정수와 정수 사이에 있는 값을 나타낼 수 있다.
// 2. 스케일을 사용해서 매우 큰 범위의 값을 나타낼 수 있다.
// 다만 부동 소수점수 연산은 정수 연산보다 느리다!
int main()
{
	// 2.34E+22f는 소수점 위로 23개의 숫자를 가진 큰 수이기 때문에
	// +1.0f를 하더라도 float는 처음 6개의 숫자 혹은 7개의 숫자까지만 나타낼 수 있으므로
	// 23번째 숫자에 1을 더하는 것은 아무런 효과도 갖지 못한다.
	// => 부동 소수점형의 정밀도 손실 문제를 보여주고 있다.
	float a = 2.34E+22f;
	float b = a + 1.0f;
	cout << "a = " << a << endl;
	cout << "b = " << b << endl;
	cout << "b - a = " << b - a << endl;
	return 0;
}